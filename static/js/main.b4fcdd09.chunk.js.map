{"version":3,"sources":["components/Logo/Logo.js","components/Graph/Graph.js","components/Guide/Tab.js","components/Guide/Tabs.js","components/Guide/Guide.js","components/Settings/Settings.js","App.js","serviceWorker.js","index.js"],"names":["Logo","className","Graph","color","numCols","setGrid","runningRef","running","grid","current","style","display","gridTemplateColumns","map","row","i","col","j","key","onClick","newGrid","produce","gridCopy","width","height","backgroundColor","border","Tab","activeTab","label","Tabs","children","useState","props","onActiveTabClick","child","Guide","Settings","setColor","setRunning","runSimulation","numRows","speed","setSpeed","speedDisabled","setSpeedDisabled","generateEmptyGrid","rows","push","Array","from","Math","random","htmlFor","onChangeComplete","hex","Slider","value","onChange","e","newValue","defaultValue","valueLabelFormat","getAriaValueText","aria-labelledby","step","marks","min","max","valueLabelDisplay","disabled","App","operations","useRef","useCallback","currentGrid","neighbors","forEach","x","y","newI","newJ","setTimeout","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b4fcdd09.chunk.js","sourcesContent":["import React from 'react';\n\nconst Logo = () => {\n  return (\n    <div className='logo'>\n      GAME OF LIFE\n    </div>\n  );\n};\n\nexport default Logo;\n","import React from 'react';\nimport produce from 'immer';\n\nconst Graph = ({\n  color,\n  numCols,\n  setGrid,\n  runningRef,\n  running,\n  grid\n}) => {\n  runningRef.current = running;\n\n  return (\n    <div\n      className='grid'\n      style={{\n        display: 'grid',\n        gridTemplateColumns: `repeat(${numCols}, 12px)`\n      }}\n    >\n      {grid.map((row, i) =>\n        row.map((col, j) => (\n          <div\n            key={`${i}-${j}`}\n            onClick={() => {\n              const newGrid = produce(grid, gridCopy => {\n                gridCopy[i][j] = grid[i][j] ? 0 : 1;\n              });\n              setGrid(newGrid);\n            }}\n            style={{\n              width: 12,\n              height: 12,\n              backgroundColor: grid[i][j] ? color : 'white',\n              border: 'solid 1px black'\n            }}\n          />\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default Graph;\n","import React from 'react';\n\nconst Tab = ({ onClick, activeTab, label }) => {\n  return (\n    <li\n      className={`tab-list-item ${ activeTab === label ? 'tab-list-active' : '' }`}\n      onClick={() => onClick(label)}\n    >\n      { label }\n    </li>\n  );\n};\n\nexport default Tab;","import React, { useState } from 'react';\nimport Tab from './Tab';\n\nconst Tabs = ({ children }) => {\n  const [activeTab, onActiveTabClick] = useState(children[0].props.label);\n  return (\n    <div className=\"tabs\">\n      <ol className=\"tab-list\">\n        {children.map(child => {\n          const { label } = child.props;\n          return (\n            <Tab\n              activeTab={activeTab}\n              key={label}\n              label={label}\n              onClick={onActiveTabClick}\n            />\n          );\n        })}\n      </ol>\n      <div className=\"tab-content\">\n        {children.map(child => {\n          const { children } = child.props;\n          if (child.props.label !== activeTab) return undefined;\n          return children;\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Tabs;","import React from 'react';\nimport Tabs from './Tabs';\n\nconst Guide = () => {\n  return (\n    <div className=\"guide text-center\">\n      <Tabs>\n        <div label=\"Still Lifes\">\n          <section className=\"diagram-content pt-1 d-flex flex-column justify-content-between\">\n            <div className=\"diagram-row d-flex justify-content-between\">\n              <div className=\"diagram diagram-block\"></div>\n              <div className=\"diagram diagram-boat\"></div>\n              <div className=\"diagram diagram-beehive\"></div>\n            </div>\n            <div className=\"diagram-row d-flex justify-content-between\">\n              <div className=\"diagram diagram-loaf\"></div>\n              <div className=\"diagram bg-transparent\"></div>\n              <div className=\"diagram bg-transparent\"></div>\n            </div>\n          </section>\n        </div>\n        <div label=\"Oscillators\">\n          <section className=\"diagram-content pt-1 d-flex flex-column justify-content-between\">\n            <div className=\"diagram-row d-flex justify-content-between\">\n              <div className=\"diagram diagram-beacon\"></div>\n              <div className=\"diagram diagram-blinker\"></div>\n              <div className=\"diagram diagram-penta-decathlon\"></div>\n            </div>\n            <div className=\"diagram-row d-flex justify-content-between\">\n              <div className=\"diagram diagram-pulsar\"></div>\n              <div className=\"diagram diagram-toad\"></div>\n              <div className=\"diagram bg-transparent\"></div>\n            </div>\n          </section>\n        </div>\n        <div label=\"Spaceships\">\n          <section className=\"diagram-content pt-1 d-flex flex-column justify-content-between\">\n            <div className=\"diagram-row d-flex justify-content-between\">\n              <div className=\"diagram diagram-glider\"></div>\n              <div className=\"diagram diagram-light-weight-spaceship\"></div>\n              <div className=\"diagram diagram-middle-weight-spaceship\"></div>\n            </div>\n            <div className=\"diagram-row d-flex justify-content-between\">\n              <div className=\"diagram diagram-heavy-weight-spaceship\"></div>\n              <div className=\"diagram bg-transparent\"></div>\n              <div className=\"diagram bg-transparent\"></div>\n            </div>\n          </section>\n        </div>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default Guide;\n","import React from 'react';\nimport { HuePicker } from 'react-color';\nimport { Slider } from '@material-ui/core';\n\nconst Settings = ({\n  color,\n  setColor,\n  running,\n  setRunning,\n  runningRef,\n  runSimulation,\n  numRows,\n  numCols,\n  setGrid,\n  speed,\n  setSpeed,\n  speedDisabled,\n  setSpeedDisabled,\n  generateEmptyGrid\n}) => {\n\n  const marks = [\n    {\n      value: 500,\n      label: '500 ms',\n    },\n    {\n      value: 450,\n      label: '450 ms',\n    },\n    {\n      value: 400,\n      label: '400 ms',\n    },\n    {\n      value: 350,\n      label: '350 ms',\n    },\n    {\n      value: 300,\n      label: '300 ms',\n    },\n    {\n      value: 250,\n      label: '250 ms',\n    },\n    {\n      value: 200,\n      label: '200 ms',\n    },\n    {\n      value: 150,\n      label: '150 ms',\n    },\n    {\n      value: 100,\n      label: '100 ms',\n    },\n    {\n      value: 50,\n      label: '50 ms',\n    },\n  ];\n\n\n  const handleChangeComplete = color => {\n    setColor(color.hex);\n  };\n\n  return (\n    <div className=\"settings\">\n      <div className=\"settings1\">\n        <div className=\"buttons\">\n          {/* START BUTTON */}\n          <button\n            className={running ? 'stop' : 'start'}\n            onClick={() => {\n              setRunning(!running);\n              setSpeedDisabled(!speedDisabled)\n              if (!running) {\n                runningRef.current = true;\n                runSimulation();\n              }\n            }}\n          >\n            {running ? 'Stop' : 'Start'}\n          </button>\n          {/* RANDOM BUTTON */}\n          <button\n            onClick={() => {\n              const rows = [];\n              for (let i = 0; i < numRows; i++) {\n                rows.push(\n                  // map random 0s and 1s with mapping callback, biased towards 1 to populate grid more\n                  // creating arrays of cols to push into the rows array\n                  Array.from(Array(numCols), () => (Math.random() > 0.7 ? 1 : 0))\n                );\n              }\n              setGrid(rows);\n            }}\n          >\n            Random\n          </button>\n          {/* CLEAR BUTTON */}\n          <button\n            onClick={() => {\n              setGrid(generateEmptyGrid());\n            }}\n          >\n            Clear\n          </button>\n        </div>\n        {/* COLOR SELECT */}\n        <div className=\"hue-picker\">\n          <label htmlFor=\"hue-picker\">Hue Picker</label>\n          <HuePicker\n            color={color}\n            onChangeComplete={handleChangeComplete}\n          />\n        </div>\n      </div>\n      <div className=\"settings2\">\n        {/* SPEED SLIDER */}\n        <label htmlFor=\"speed-slider\">Speed</label>\n        <Slider\n          value={speed}\n          onChange={(e, newValue) => setSpeed(newValue)}\n          defaultValue={200}\n          valueLabelFormat={value => value}\n          getAriaValueText={value => `${value}`}\n          aria-labelledby=\"speed slider\"\n          step={50}\n          marks={marks}\n          min={50}\n          max={500}\n          valueLabelDisplay=\"off\"\n          disabled={speedDisabled}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Settings;\n","import React, { useState, useRef, useCallback } from 'react';\nimport Logo from './components/Logo/Logo';\nimport Graph from './components/Graph/Graph';\nimport Guide from './components/Guide/Guide';\nimport Settings from './components/Settings/Settings';\nimport produce from 'immer';\n\nimport './App.css';\n\nconst App = () => {\n  const numRows = 50;\n  const numCols = 50;\n\n  const operations = [\n    [0, 1],\n    [0, -1],\n    [1, -1],\n    [-1, 1],\n    [1, 1],\n    [-1, -1],\n    [1, 0],\n    [-1, 0]\n  ];\n\n  const [speed, setSpeed] = useState(200);\n\n  const [color, setColor] = useState('turquoise');\n\n  const [speedDisabled, setSpeedDisabled] = useState(false);\n\n  const generateEmptyGrid = () => {\n    const rows = [];\n    for (let i = 0; i < numRows; i++) {\n      // creating Array of numCols length, mapping 0s with mapping callback\n      rows.push(Array.from(Array(numCols), () => 0));\n      // rows.push(Array.from(Array(numCols).fill(0)));\n    }\n    return rows;\n  };\n  // initializing grid with calling of useState, destructuring grid and setGrid from the return\n  // first value of return is the value of the state, second is the update function\n  const [grid, setGrid] = useState(() => {\n    // using callback so this is called only upon initial render\n    return generateEmptyGrid(); // default value is returned empty grid\n  });\n\n  // first param for useState is initial value\n  const [running, setRunning] = useState(false);\n\n  const runningRef = useRef(running);\n\n  const runSimulation = useCallback(() => {\n    if (!runningRef.current) {\n      return;\n    }\n    setGrid(currentGrid => {\n      return produce(currentGrid, gridCopy => {\n        for (let i = 0; i < numRows; i++) {\n          for (let j = 0; j < numCols; j++) {\n            let neighbors = 0;\n            operations.forEach(([x, y]) => {\n              const newI = i + x;\n              const newJ = j + y;\n              // checking bounds to make sure simulation doesn't spill out of grid\n              if (newI >= 0 && newI < numRows && newJ >= 0 && newJ < numCols) {\n                neighbors += currentGrid[newI][newJ];\n              }\n            });\n\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[i][j] = 0;\n            } else if (currentGrid[i][j] === 0 && neighbors === 3) {\n              gridCopy[i][j] = 1;\n            }\n          }\n        }\n      });\n    });\n    setTimeout(runSimulation, speed);\n  }, [numCols, numRows, operations, speed]);\n\n  return (\n    <div className=\"container\">\n      <div className=\"header\">\n        <Logo />\n        <Settings\n          color={color}\n          setColor={setColor}\n          numRows={numRows}\n          numCols={numCols}\n          runSimulation={runSimulation}\n          generateEmptyGrid={generateEmptyGrid}\n          running={running}\n          setRunning={setRunning}\n          runningRef={runningRef}\n          setGrid={setGrid}\n          setSpeed={setSpeed}\n          speed={speed}\n          speedDisabled={speedDisabled}\n          setSpeedDisabled={setSpeedDisabled}\n        />\n      </div>\n      <Guide />\n      <Graph\n        color={color}\n        setColor={setColor}\n        numCols={numCols}\n        running={running}\n        setRunning={setRunning}\n        runningRef={runningRef}\n        grid={grid}\n        setGrid={setGrid}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/styles.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}